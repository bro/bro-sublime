%YAML 1.2
---
name: Zeek
file_extensions: [bro, zeek]
scope: source.zeek

# TODO: ideas for improvements below
# - different scopes for event/hook/function call vs. definition vs. definition
# - other various entity.name scopes (namespace, struct, enum, type, function)
# - scopes for parameter names (and other variables, but that's harder)
# - scopes for record fields and enum value names
# - meta scopes for larger code blocks
# - maybe more support. scopes for stuff provided in base/builtin frameworks

variables:
  IDPART: '[A-Za-z_][A-Za-z_0-9]*'
  ID: '{{IDPART}}(?:::{{IDPART}})*'

  FLOAT: '(?:(\d*\.\d*)([eE][+-]?\d+)?)|(?:(\d*)([eE][+-]?\d+))|(?:(\d*\.\d*))'

  FUNC_LAHEAD: '(?=\s*\()'

  HOSTPART: '[A-Za-z0-9][A-Za-z0-9\-]*'
  HOSTNAME: '{{HOSTPART}}(?:\.{{HOSTPART}})+'

  IPV4_NUM: '25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[0-9]{1,2}'
  IPV4_ADDR: '(?:{{IPV4_NUM}})\.(?:{{IPV4_NUM}})\.(?:{{IPV4_NUM}})\.(?:{{IPV4_NUM}})'

  HEXCHAR: '[0-9a-fA-F]'
  HEXTET: '{{HEXCHAR}}{1,4}'

  IPV6_8HEXTETS: '\[{{HEXTET}}(?::{{HEXTET}}){7}\]'

  IPV6_6HEXTETS_4DEC: '\[(?:{{HEXTET}}:){6}{{IPV4_ADDR}}\]'

  IPV6_COMPRESSED_LEAD_HEXTETS0: '\[::(?:{{HEXTET}}(?::{{HEXTET}}){0,6})?\]'
  IPV6_COMPRESSED_LEAD_HEXTETS1: '\[{{HEXTET}}(?::{{HEXTET}}){0}::(?:{{HEXTET}}(?::{{HEXTET}}){0,5})?\]'
  IPV6_COMPRESSED_LEAD_HEXTETS2: '\[{{HEXTET}}(?::{{HEXTET}}){1}::(?:{{HEXTET}}(?::{{HEXTET}}){0,4})?\]'
  IPV6_COMPRESSED_LEAD_HEXTETS3: '\[{{HEXTET}}(?::{{HEXTET}}){2}::(?:{{HEXTET}}(?::{{HEXTET}}){0,3})?\]'
  IPV6_COMPRESSED_LEAD_HEXTETS4: '\[{{HEXTET}}(?::{{HEXTET}}){3}::(?:{{HEXTET}}(?::{{HEXTET}}){0,2})?\]'
  IPV6_COMPRESSED_LEAD_HEXTETS5: '\[{{HEXTET}}(?::{{HEXTET}}){4}::(?:{{HEXTET}}(?::{{HEXTET}}){0,1})?\]'
  IPV6_COMPRESSED_LEAD_HEXTETS6: '\[{{HEXTET}}(?::{{HEXTET}}){5}::(?:{{HEXTET}}(?::{{HEXTET}}){0,0})?\]'
  IPV6_COMPRESSED_LEAD_HEXTETS7: '\[{{HEXTET}}(?::{{HEXTET}}){6}::\]'

  IPV6_COMPRESSED: '{{IPV6_COMPRESSED_LEAD_HEXTETS0}}|{{IPV6_COMPRESSED_LEAD_HEXTETS1}}|{{IPV6_COMPRESSED_LEAD_HEXTETS2}}|{{IPV6_COMPRESSED_LEAD_HEXTETS3}}|{{IPV6_COMPRESSED_LEAD_HEXTETS4}}|{{IPV6_COMPRESSED_LEAD_HEXTETS5}}|{{IPV6_COMPRESSED_LEAD_HEXTETS6}}|{{IPV6_COMPRESSED_LEAD_HEXTETS7}}'

  IPV6_COMPRESSED_HEXT4DEC_LEAD_HEXTETS0: '\[::(?:{{HEXTET}}(?::{{HEXTET}}){0,4})?{{IPV4_ADDR}}\]'

  IPV6_COMPRESSED_HEXT4DEC_LEAD_HEXTETS1: '\[{{HEXTET}}(?::{{HEXTET}}){0}::(?:{{HEXTET}}(?::{{HEXTET}}){0,3})?{{IPV4_ADDR}}\]'

  IPV6_COMPRESSED_HEXT4DEC_LEAD_HEXTETS2: '\[{{HEXTET}}(?::{{HEXTET}}){1}::(?:{{HEXTET}}(?::{{HEXTET}}){0,2})?{{IPV4_ADDR}}\]'

  IPV6_COMPRESSED_HEXT4DEC_LEAD_HEXTETS3: '\[{{HEXTET}}(?::{{HEXTET}}){2}::(?:{{HEXTET}}(?::{{HEXTET}}){0,1})?{{IPV4_ADDR}}\]'

  IPV6_COMPRESSED_HEXT4DEC_LEAD_HEXTETS4: '\[{{HEXTET}}(?::{{HEXTET}}){3}::(?:{{HEXTET}}(?::{{HEXTET}}){0,0})?{{IPV4_ADDR}}\]'

  IPV6_COMPRESSED_HEXT4DEC_LEAD_HEXTETS5: '\[{{HEXTET}}(?::{{HEXTET}}){4}::{{IPV4_ADDR}}\]'

  IPV6_COMPRESSED_HEX4DEC: '{{IPV6_COMPRESSED_HEXT4DEC_LEAD_HEXTETS0}}|{{IPV6_COMPRESSED_HEXT4DEC_LEAD_HEXTETS1}}|{{IPV6_COMPRESSED_HEXT4DEC_LEAD_HEXTETS2}}|{{IPV6_COMPRESSED_HEXT4DEC_LEAD_HEXTETS3}}|{{IPV6_COMPRESSED_HEXT4DEC_LEAD_HEXTETS4}}|{{IPV6_COMPRESSED_HEXT4DEC_LEAD_HEXTETS5}}'

  IPV6_ADDR: '{{IPV6_8HEXTETS}}|{{IPV6_6HEXTETS_4DEC}}|{{IPV6_COMPRESSED}}|{{IPV6_COMPRESSED_HEX4DEC}}'

  IP_ADDR: '{{IPV6_ADDR}}|{{IPV4_ADDR}}'

contexts:
  main:
      # Zeexygen-style comment (script summary)
    - match: '##!'
      scope: punctuation.definition.comment.zeek
      push: comment

      # Zeexygen-style comment (after members)
    - match: '##<'
      scope: punctuation.definition.comment.zeek
      push: comment

      # Zeexygen-style comment
    - match: '##'
      scope: punctuation.definition.comment.zeek
      push: comment

    - match: '#'
      scope: punctuation.definition.comment.zeek
      push: comment

    - match: '"'
      scope: punctuation.definition.string.begin.zeek
      push: string

    # This is not the greatest match for patterns.  A more thorough
    # replication of the parsing logic would be needed to understand
    # the difference between / used as a pattern delimiter versus
    # division operator (currently, if there's use of two '/' division
    # operators on a given line, that's miss-detected as a pattern).
    - match: '(/)(?=.*/)'
      scope: string.regexp.zeek
      captures:
        1: punctuation.definition.string.begin.zeek
      push: pattern

    - match: '(@(load-plugin|load-sigs|load|unload)).*$'
      scope: meta.preprocessor.zeek
      captures:
        1: keyword.other.zeek

    - match: '(@\S+)'
      scope: meta.preprocessor.zeek
      captures:
        1: keyword.other.zeek

    - match: \&\b(redef|priority|log|optional|default|add_func|delete_func|expire_func|read_expire|write_expire|create_expire|synchronized|persistent|rotate_interval|rotate_size|encrypt|raw_output|mergeable|error_handler|type_column|deprecated)\b
      scope: storage.modifier.attribute.zeek

    - match: \b(T|F)\b
      scope: constant.language.zeek

    - match: \b\d{1,5}/(udp|tcp|icmp|unknown)\b
      scope: constant.numeric.port.zeek

    - match: '{{IP_ADDR}}'
      scope: constant.numeric.addr.zeek

    - match: '({{FLOAT}}|\d+)\s*(day|hr|min|msec|usec|sec)s?'
      scope: constant.numeric.float.decimal.interval.zeek

    - match: '{{FLOAT}}'
      scope: constant.numeric.float.decimal.zeek

    - match: \b{{HOSTNAME}}\b
      scope: constant.numeric.hostname.zeek

    - match: \b(0x{{HEXCHAR}}+)\b
      scope: constant.numeric.integer.hexadecimal.zeek

    - match: \b(\d+)\b
      scope: constant.numeric.integer.decimal.zeek

    - match: '(==)|(!=)|(<=)|(<)|(>=)|(>)'
      scope: keyword.operator.zeek

    - match: '(&&)|(||)|(!)'
      scope: keyword.operator.zeek

    - match: '(=)|(\+=)|(-=)'
      scope: keyword.operator.zeek

    - match: '(\+\+)|(\+)|(--)|(-)|(\*)|(/)|(%)'
      scope: keyword.operator.zeek

    - match: '(&)|(\|)|(\^)|(~)'
      scope: keyword.operator.zeek

    - match: \b(in|as|is)\b
      scope: keyword.operator.zeek

    - match: ';'
      scope: punctuation.terminator.zeek

    - match: '\??\$'
      scope: punctuation.accessor.zeek

    - match: '::'
      scope: punctuation.accessor.zeek

    - match: '(\?)'
      scope: keyword.operator.zeek

    - match: '(?<=\S)(:)'
      scope: punctuation.separator.zeek

    - match: '(,)'
      scope: punctuation.separator.zeek

    - match: '(:)'
      scope: keyword.operator.zeek

    - match: (module)\s+({{ID}})
      scope: meta.namespace.zeek
      captures:
        1: keyword.other.zeek
        2: entity.name.namespace.zeek

    - match: \b(export)\b
      scope: keyword.other.zeek

    - match: \b(if|else)\b
      scope: keyword.control.conditional.zeek

    - match: \b(for|while)\b
      scope: keyword.control.zeek

    - match: \b(return|break|next|continue|fallthrough)\b
      scope: keyword.control.zeek

    - match: \b(switch|default|case)\b
      scope: keyword.control.zeek

    - match: \b(add|delete)\b
      scope: keyword.other.zeek

    - match: \b(print)\b
      scope: keyword.other.zeek

    - match: \b(when|timeout|schedule)\b
      scope: keyword.control.zeek

    - match: '\b(type)\s+({{ID}})\s*(:)\s*\b(record)\b'
      scope: meta.struct.record.zeek
      captures:
        1: keyword.other.zeek
        2: entity.name.struct.record.zeek
        3: punctuation.separator.zeek
        4: storage.type.struct.record.zeek keyword.declaration.struct.record.zeek

    - match: '\b(type)\s+({{ID}})\s*(:)\s*\b(enum)\b'
      scope: meta.enum.zeek
      captures:
        1: keyword.other.zeek
        2: entity.name.enum.zeek
        3: punctuation.separator.zeek
        4: storage.type.enum.zeek keyword.declaration.enum.zeek

    - match: '\b(type)\s+({{ID}})\s*(:)'
      scope: meta.type.zeek
      captures:
        1: keyword.other.zeek
        2: entity.name.type.zeek
        3: punctuation.separator.zeek

    - match: \b(redef)\s+(record)\s+({{ID}})\b
      scope: meta.struct.record.zeek
      captures:
        1: keyword.other.zeek
        2: storage.type.struct.record.zeek keyword.declaration.struct.record.zeek
        3: entity.name.struct.record.zeek

    - match: \b(redef)\s+(enum)\s+({{ID}})\b
      scope: meta.enum.zeek
      captures:
        1: keyword.other.zeek
        2: storage.type.enum.zeek keyword.declaration.enum.zeek
        3: entity.name.enum.zeek

    - match: \b(event)\s+({{ID}}){{FUNC_LAHEAD}}
      captures:
        1: storage.type.zeek
        2: entity.name.function.event.zeek

    - match: \b(hook)\s+({{ID}}){{FUNC_LAHEAD}}
      captures:
        1: storage.type.zeek
        2: entity.name.function.hook.zeek

    - match: \b(function)\s+({{ID}}){{FUNC_LAHEAD}}
      captures:
        1: storage.type.zeek
        2: entity.name.function.zeek

    - match: \b(redef)\b
      scope: keyword.other.zeek

    - match: \b(any)\b
      scope: storage.type.zeek

    - match: \b(enum|record|set|table|vector)\b
      scope: storage.type.zeek

    - match: \b(opaque)\s+(of)\s+({{ID}})\b
      captures:
        1: storage.type.zeek
        2: keyword.operator.zeek
        3: storage.type.zeek

    - match: \b(of)\b
      scope: keyword.operator.zeek

    - match: \b(addr|bool|count|double|file|int|interval|pattern|port|string|subnet|time)\b
      scope: storage.type.zeek

    - match: \b(function|hook|event)\b
      scope: storage.type.zeek

    - match: \b(global|local|const|option)\b
      scope: storage.modifier.zeek

    - match: \b({{ID}}){{FUNC_LAHEAD}}
      scope: meta.function-call.zeek entity.name.function.call.zeek

    # - include: builtins

    - match: \{
      scope: punctuation.section.block.begin.zeek
    - match: \}
      scope: punctuation.section.block.end.zeek

    - match: \[
      scope: punctuation.section.brackets.begin.zeek
    - match: \]
      scope: punctuation.section.brackets.end.zeek

    - match: \(
      scope: punctuation.section.parens.begin.zeek
    - match: \)
      scope: punctuation.section.parens.end.zeek

  comment:
    - meta_scope: comment.line.zeek
    - match: $
      pop: true

  string:
    - meta_scope: string.quoted.double.zeek

    - match: \\.
      scope: constant.character.escape.zeek

      # Format specifier
    - match: '%-?[0-9]*(\.[0-9]+)?[DTdxsefg]'
      scope: constant.other.placeholder.zeek

    - match: '"'
      scope: punctuation.definition.string.end.zeek
      pop: true

  pattern:
    - meta_scope: string.regexp.zeek

    - match: \\.
      scope: constant.character.escape.zeek

    - match: '/'
      scope: punctuation.definition.string.end.zeek
      pop: true

  # Common events/functions/types provided by the base/builtin frameworks
  # builtins:
    # I've left these out as it starts to feel busy or inconsistent (or both)

    # Common functions
    # - match: \b(fmt|cat|cat_sep)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek
    # - match: \b(current_time|network_time)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek
    # - match: \b(getenv|setenv)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek
    # - match: \b(exit|terminate|system)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek
    # - match: \b(rand|srand)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek
    # - match: \b(floor|sqrt|exp|ln|log10)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek
    # - match: \b(type_name)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek
    # - match: \b(open_for_append|open|close|write_file|set_buf|flush_all|mkdir|rmdir|unlink|rename)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek
    # - match: \b(suspend_processing|continue_processing)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek
    # - match: \b(split_string|split_string1|split_string_all|split_string_n)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek
    # - match: \b(sub_bytes|sub|gsub|strcmp|strstr|subst_string|to_lower|to_upper)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek
    # - match: \b(is_ascii|escape_string)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek
    # - match: \b(str_split|lstrip|rstrip|strip)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek
    # - match: \b(safe_shell_quote)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek
    # - match: \b(find_all|find_last)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek
    # - match: \b(hexdump)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek
    # - match: \b(reverse)\b{{FUNC_LAHEAD}}
    #   scope: support.function.zeek

    # Common events
    # - match: \b(zeek_init|bro_init|zeek_done|bro_done)\b{{FUNC_LAHEAD}}
    #   scope: support.function.event.zeek
    # - match: \b(connection_(attempt|established|pending|rejected|reset|reused|state_remove|timeout))\b{{FUNC_LAHEAD}}
    #   scope: support.function.event.zeek
    # - match: \b(file_(hash|new|over_new_connection|sniff|state_remove|timeout))\b{{FUNC_LAHEAD}}
    #   scope: support.function.event.zeek
    # - match: \b(file|conn|flow|net)_weird\b{{FUNC_LAHEAD}}
    #   scope: support.function.event.zeek
    # - match: \b(protocol_(violation|confirmation))\b{{FUNC_LAHEAD}}
    #   scope: support.function.event.zeek
    # - match: \b(signature_match)\b{{FUNC_LAHEAD}}
    #   scope: support.function.event.zeek

    # Common types
    # - match: \b(string_array|string_set|addr_set|count_set|index_vec|subnet_vec|any_vec|string_vec|addr_vec)\b
    #   scope: support.type.zeek
    # - match: \b(mime_match|mime_matches|transport_proto|conn_id|flow_id)\b
    #   scope: support.type.zeek
    # - match: \b(icmp_conn|icmp_context)\b
    #   scope: support.type.zeek
    # - match: \b(endpoint|connection)\b
    #   scope: support.type.zeek
    # - match: \b(fa_file||fa_metadata)\b
    #   scope: support.type.zeek
    # - match: \b(geo_location)\b
    #   scope: support.type.zeek
    # - match: \b(ip6_ext_hdr_chain|ip6_ext_hdr|ip6_hdr|ip4_hdr|tcp_hdr|udp_hdr|icmp_hdr|pkt_hdr|l2_hdr|raw_pkt_hdr)\b
    #   scope: support.type.zeek
